---
interface Props {
  title: string;
  downloadInvitation: string;
  events: Array<{
    title: string;
    date: string;
    time: string;
    venue: string;
    address: string;
    dateLabel: string;
    timeLabel: string;
    venueLabel: string;
    mapUrl: string;
  }>;
  lang: string;
}

const { title, downloadInvitation, events, lang } = Astro.props;

// Determine download URL and filename based on language
const downloadUrl = lang === 'en' ? '/en/invitation.png' : '/invitation.png';
const downloadFilename =
  lang === 'en' ? 'wedding-invitation-anais-rayko.png' : 'invitacion-boda-anais-rayko.png';
---

<section id="event" class="relative py-16 md:py-24 px-4 md:px-8 overflow-hidden">
  <!-- Starry background canvas -->
  <canvas id="event-canvas" class="absolute inset-0 w-full h-full"></canvas>

  <div class="relative z-10 max-w-7xl mx-auto">
    <h2 class="text-4xl md:text-5xl font-serif text-white text-center mb-8">{title}</h2>

    <!-- Download Invitation Button -->
    <div class="text-center mb-12">
      <a
        href={downloadUrl}
        download={downloadFilename}
        class="inline-flex items-center gap-3 bg-transparent backdrop-blur-md hover:bg-gold/10 text-gold px-8 py-4 rounded-lg border border-gold/30 transition-all duration-300 hover:scale-105 hover:shadow-lg"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
          ></path>
        </svg>
        {downloadInvitation}
      </a>
    </div>

    <!-- Events Grid -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
      {
        events.map(event => (
          <div class="bg-transparent backdrop-blur-md rounded-lg shadow-lg border border-gold/30 overflow-hidden">
            <div class="p-6">
              <h3 class="text-2xl font-serif text-white text-center mb-6">{event.title}</h3>

              <div class="space-y-6">
                <div class="flex items-start gap-4">
                  <div class="w-12 h-12 bg-gold/5 border border-gold/30 rounded-full flex items-center justify-center flex-shrink-0">
                    <svg
                      class="w-6 h-6 text-gold"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-white mb-1">{event.dateLabel}</h4>
                    <p class="text-white/70">{event.date}</p>
                  </div>
                </div>

                <div class="flex items-start gap-4">
                  <div class="w-12 h-12 bg-gold/5 border border-gold/30 rounded-full flex items-center justify-center flex-shrink-0">
                    <svg
                      class="w-6 h-6 text-gold"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-white mb-1">{event.timeLabel}</h4>
                    <p class="text-white/70">{event.time}</p>
                  </div>
                </div>

                <div class="flex items-start gap-4">
                  <div class="w-12 h-12 bg-gold/5 border border-gold/30 rounded-full flex items-center justify-center flex-shrink-0">
                    <svg
                      class="w-6 h-6 text-gold"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                      />
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                      />
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-white mb-1">{event.venueLabel}</h4>
                    <p class="text-white/70">{event.venue}</p>
                    <p class="text-white/70 text-sm mt-1">{event.address}</p>
                  </div>
                </div>
              </div>
            </div>

            <div class="h-[300px] lg:h-[250px]">
              <iframe
                src={event.mapUrl}
                width="100%"
                height="100%"
                style="border:0;"
                allowfullscreen=""
                loading="lazy"
                referrerpolicy="no-referrer-when-downgrade"
                title={`${event.venue} location`}
              />
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<script>
  // Starry background animation
  function initStarryBackground() {
    const canvas = document.getElementById('event-canvas') as HTMLCanvasElement;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    const resizeCanvas = () => {
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;
    };
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // Create background stars
    const stars: Array<{ x: number; y: number; radius: number; opacity: number }> = [];
    for (let i = 0; i < 120; i++) {
      stars.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        radius: Math.random() * 1.5,
        opacity: Math.random() * 0.5 + 0.3,
      });
    }

    let time = 0;
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Deep space gradient with warmer tones for event section
      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradient.addColorStop(0, '#1a1a2e');
      gradient.addColorStop(0.5, '#16213e');
      gradient.addColorStop(1, '#0f0f23');
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Draw twinkling stars
      stars.forEach(star => {
        const twinkle = Math.sin(time * 2 + star.x) * 0.3 + 0.7;
        ctx.beginPath();
        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity * twinkle})`;
        ctx.fill();
      });

      time += 0.01;
      requestAnimationFrame(animate);
    };
    animate();
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initStarryBackground);
  } else {
    initStarryBackground();
  }
</script>
