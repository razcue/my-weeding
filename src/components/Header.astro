---
import { getLangFromUrl, useTranslations } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const navLinks = [
  { name: t('nav.home'), href: lang === 'en' ? '/en' : '/' },
  { name: t('nav.timeline'), href: lang === 'en' ? '/en#timeline' : '/#timeline' },
  { name: t('nav.about'), href: lang === 'en' ? '/en#family' : '/#family' },
  { name: t('nav.event'), href: lang === 'en' ? '/en#event' : '/#event' },
];
---

<header
  id="main-header"
  class="fixed top-0 left-0 right-0 z-50 bg-transparent transition-all duration-500"
>
  <!-- Starry background canvas for when below hero -->
  <canvas
    id="header-canvas"
    class="absolute inset-0 w-full h-full opacity-0 transition-opacity duration-500"></canvas>
  <nav class="max-w-7xl mx-auto px-4 md:px-8 py-4 relative z-10">
    <div class="flex items-center justify-between">
      <!-- Logo/Brand -->
      <a href="/" class="text-2xl md:text-3xl font-serif text-gradient-gold font-bold">
        Anais & Rayko
      </a>

      <!-- Desktop Navigation -->
      <ul class="hidden md:flex items-center gap-8">
        {
          navLinks.map(link => (
            <li>
              <a
                href={link.href}
                class="nav-link text-white hover:text-gold transition-colors duration-300 font-medium"
              >
                {link.name}
              </a>
            </li>
          ))
        }
        <!-- Language Switcher -->
        <li class="flex items-center gap-2">
          <a
            href={lang === 'es' ? '/en' : '/'}
            class="text-white hover:text-gold transition-colors duration-300 font-medium text-sm"
          >
            {lang === 'es' ? 'ðŸ‡¬ðŸ‡§ EN' : 'ðŸ‡ªðŸ‡¸ ES'}
          </a>
        </li>
      </ul>

      <!-- Mobile Menu Button -->
      <button id="mobile-menu-btn" class="md:hidden text-white p-2" aria-label="Toggle mobile menu">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="hidden md:hidden mt-4 pb-4 border-t border-gold/20 pt-4">
      <ul class="flex flex-col gap-4">
        {
          navLinks.map(link => (
            <li>
              <a
                href={link.href}
                class="block nav-link text-white hover:text-gold transition-colors duration-300 font-medium w-fit ml-auto mr-4"
              >
                {link.name}
              </a>
            </li>
          ))
        }
        <!-- Language Switcher Mobile -->
        <li>
          <a
            href={lang === 'es' ? '/en' : '/'}
            class="block text-white hover:text-gold transition-colors duration-300 font-medium text-sm w-fit ml-auto mr-4"
          >
            {lang === 'es' ? 'ðŸ‡¬ðŸ‡§ English' : 'ðŸ‡ªðŸ‡¸ EspaÃ±ol'}
          </a>
        </li>
      </ul>
    </div>
  </nav>
</header>

<script>
  // Wait for DOM to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('main-header');
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    let lastScrollY = 0;
    let heroHeight = 0;

    // Starry background variables
    const headerCanvas = document.getElementById('header-canvas') as HTMLCanvasElement;
    let headerStars: Array<{
      x: number;
      y: number;
      radius: number;
      opacity: number;
      twinkleSpeed: number;
    }> = [];
    let headerAnimationId: number | null = null;
    let headerTime = 0;

    // Get hero section height
    function updateHeroHeight() {
      const heroSection = document.querySelector('#hero') as HTMLElement;
      if (heroSection) {
        heroHeight = heroSection.offsetHeight;
      }
    }

    // Starry background functions
    function initHeaderStars() {
      if (!headerCanvas) return;

      const ctx = headerCanvas.getContext('2d');
      if (!ctx) return;

      // Set canvas size
      headerCanvas.width = headerCanvas.offsetWidth;
      headerCanvas.height = headerCanvas.offsetHeight;

      // Create stars
      headerStars = [];
      for (let i = 0; i < 50; i++) {
        headerStars.push({
          x: Math.random() * headerCanvas.width,
          y: Math.random() * headerCanvas.height,
          radius: Math.random() * 1.2 + 0.3,
          opacity: Math.random() * 0.6 + 0.2,
          twinkleSpeed: Math.random() * 0.02 + 0.01,
        });
      }
    }

    function animateHeaderStars() {
      if (!headerCanvas) return;

      const ctx = headerCanvas.getContext('2d');
      if (!ctx) return;

      // Clear canvas
      ctx.clearRect(0, 0, headerCanvas.width, headerCanvas.height);

      // Draw stars
      headerStars.forEach(star => {
        const twinkle = Math.sin(headerTime * star.twinkleSpeed) * 0.3 + 0.7;
        ctx.beginPath();
        ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity * twinkle})`;
        ctx.fill();
      });

      headerTime += 0.02;
      headerAnimationId = requestAnimationFrame(animateHeaderStars);
    }

    function startHeaderStars() {
      if (!headerAnimationId) {
        initHeaderStars();
        animateHeaderStars();
      }
    }

    function stopHeaderStars() {
      if (headerAnimationId) {
        cancelAnimationFrame(headerAnimationId);
        headerAnimationId = null;
      }
    }

    // Update header styling based on scroll position
    function updateHeaderOnScroll() {
      const currentScrollY = window.scrollY;

      if (!header) return;

      // If we're in the hero section
      if (currentScrollY < heroHeight) {
        // Scrolling down - hide header
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
          header.style.transform = 'translateY(-100%)';
          header.classList.remove('bg-white/95', 'backdrop-blur-sm', 'shadow-sm');
          header.classList.add('bg-transparent');
        }
        // Scrolling up - show transparent header
        else {
          header.style.transform = 'translateY(0)';
          header.classList.remove('bg-white/95', 'backdrop-blur-sm', 'shadow-sm');
          header.classList.add('bg-transparent');
        }

        // Hide starry background in hero section
        headerCanvas?.classList.remove('opacity-100');
        headerCanvas?.classList.add('opacity-0');
        stopHeaderStars();

        // Keep text white in hero section
        const navLinks = header.querySelectorAll('.nav-link');
        const menuBtn = header.querySelector('#mobile-menu-btn');
        navLinks.forEach(link => {
          link.classList.remove('text-dark');
          link.classList.add('text-white');
        });
        if (menuBtn) {
          menuBtn.classList.remove('text-dark');
          menuBtn.classList.add('text-white');
        }
      }
      // Below hero section - fixed header with starry background
      else {
        header.style.transform = 'translateY(0)';
        header.classList.remove('bg-transparent');
        header.classList.add('bg-black/20', 'backdrop-blur-sm', 'shadow-sm');

        // Show starry background below hero
        headerCanvas?.classList.remove('opacity-0');
        headerCanvas?.classList.add('opacity-100');
        startHeaderStars();

        // Change text to white below hero (for dark background)
        const navLinks = header.querySelectorAll('.nav-link');
        const menuBtn = header.querySelector('#mobile-menu-btn');
        navLinks.forEach(link => {
          link.classList.remove('text-dark');
          link.classList.add('text-white');
        });
        if (menuBtn) {
          menuBtn.classList.remove('text-dark');
          menuBtn.classList.add('text-white');
        }
      }

      lastScrollY = currentScrollY;
    }

    // Event listeners
    window.addEventListener('scroll', updateHeaderOnScroll, { passive: true });
    window.addEventListener('resize', () => {
      updateHeroHeight();
      updateHeaderOnScroll();
    });

    // Mobile menu functionality
    mobileMenuBtn?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
    });

    // Close mobile menu when clicking a link
    const mobileLinks = mobileMenu?.querySelectorAll('a');
    mobileLinks?.forEach(link => {
      link.addEventListener('click', () => {
        mobileMenu?.classList.add('hidden');
      });
    });
  });
</script>
